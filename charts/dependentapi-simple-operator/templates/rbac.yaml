---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: "{{ .Release.Namespace }}"
  name: {{ .Release.Name }}-depapi-op-account
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Release.Name }}-depapi-op-role-cluster
rules:

  # Framework: knowing which other operators are running (i.e. peering).
  - apiGroups: [zalando.org]
    resources: [clusterkopfpeerings]
    verbs: [list, watch, patch, get]

  # Framework: runtime observation of namespaces & CRDs (addition/deletion).
  - apiGroups: [apiextensions.k8s.io]
    resources: [customresourcedefinitions]
    verbs: [list, watch]
  - apiGroups: [""]
    resources: [namespaces]
    verbs: [list, watch]

  # Framework: admission webhook configuration management.
  - apiGroups: [admissionregistration.k8s.io]
    resources: [mutatingwebhookconfigurations]
    verbs: [create, patch]


  # Application: read-only access for watching cluster-wide.
  - apiGroups: [oda.tmforum.org]
    resources: [dependentapis]
    verbs: [list, watch, get, patch]

  - apiGroups: [oda.tmforum.org]
    resources: [components]
    verbs: [list, watch, get, patch]

  - apiGroups: [oda.tmforum.org]
    resources: [exposedapis]
    verbs: [list, watch, get]

  # Application: read-only access for watching cluster-wide.
  - apiGroups: [""]
    resources: [pods]
    verbs: [list, watch, patch, delete]
    
  # Application: read-only access for replica_Set
  - apiGroups: [apps]
    resources: [replicasets]
    verbs: [list, get]

  # Application: read-only access for deployments
  - apiGroups: [apps]
    resources: [deployments]
    verbs: [list, get]

  # Application: create events
  - apiGroups: [""]
    resources: [events]
    verbs: [create]
    
  # Application: create mutating webhooks 
  - apiGroups: [admissionregistration.k8s.io]
    resources: [validatingwebhookconfigurations, mutatingwebhookconfigurations]
    verbs: [create, patch]
        
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: "{{ .Release.Namespace }}"
  name: {{ .Release.Name }}-depapi-op-role-namespaced
rules:

  # Framework: knowing which other operators are running (i.e. peering).
  - apiGroups: [zalando.org]
    resources: [kopfpeerings]
    verbs: [list, watch, patch, get]

  # Framework: posting the events about the handlers progress/errors.
  - apiGroups: [""]
    resources: [events]
    verbs: [create]

  # Application: watching & handling for the custom resource we declare.
  - apiGroups: [oda.tmforum.org]
    resources: [dependentapis]
    verbs: [list, watch, patch, get]

  # Application: watching & handling for the custom resource we declare.
  - apiGroups: [oda.tmforum.org]
    resources: [components]
    verbs: [list, watch, patch, get]

  # Application: watching & handling for the custom resource we declare.
  
  - apiGroups: [oda.tmforum.org]
    resources: [exposedapis]
    verbs: [list, watch, get]

  # Application: watching & handling for the custom resource we declare.
  - apiGroups: [""]
    resources: [pods]
    verbs: [list, watch, patch, delete]

  # Application: read-only access for replica_Set
  - apiGroups: [apps]
    resources: [replicasets]
    verbs: [list, get]


  # Application: watching & handling for deployments (transfer labels to pods).
  - apiGroups: [apps]
    resources: [deployments]
    verbs: [list, watch, patch, get]

  # Application: other resources it produces and manipulates.
  # Here, we create Jobs+PVCs+Pods, but we do not patch/update/delete them ever.
  - apiGroups: [batch, extensions]
    resources: [jobs]
    verbs: [create]
  - apiGroups: [""]
    resources: [pods, persistentvolumeclaims]
    verbs: [create]
    
  ## Application: create mutating webhooks 
  #- apiGroups: [admissionregistration.k8s.io/v1, admissionregistration.k8s.io/v1beta1]
  #  resources: [validatingwebhookconfigurations, mutatingwebhookconfigurations]
  #  verbs: [create, patch]
    
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Release.Name }}-depapi-op-rolebinding-cluster
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Release.Name }}-depapi-op-role-cluster
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}-depapi-op-account
    namespace: "{{ .Release.Namespace }}"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: "{{ .Release.Namespace }}"
  name: {{ .Release.Name }}-depapi-op-rolebinding-namespaced
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ .Release.Name }}-depapi-op-role-namespaced
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}-depapi-op-account
