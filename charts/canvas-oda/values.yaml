# Recursive
# https://github.com/helm/helm/issues/2247
# https://github.com/Noksa/helm-resolve-deps
  # Default values for cert-manager-init.
  # This is a YAML-formatted file.
  # Declare variables to be passed into your templates.
global:
  certificate:
    # -- Name of the certificate and webhook |
    appName: "compcrdwebhook"
 
istioCert:
  namespace: "istio-ingress"
  certificate:
    duration: 21600h
    renewBefore: 360h 

oda-crds:
  enabled: true

canvas-namespaces:
  enabled: true
  certManagerNamespace: cert-manager
  componentNamespace: components
  istio:
    # --  Add Istion instrumentation label to the components namespace
    labelEnabledComponent: true

cert-manager-init:
  nameOverride: ""
  fullnameOverride: ""
  namespace: canvas
  # The certificate has a default duration of 90d. It rotates automatically, but the the server using it doesn't handle that rotation
  # https://github.com/tmforum-oda/oda-canvas-charts/issues/38
  #
  # -- Duration of the certificates generate for the webhook in hours |
  certificateDuration: 21600h
  #Cert manager get a lease  object on kube-system namespace to elect leader.
  #The time to wait for a leader is 60s.
  #The lease can survive among installations, so cainjectot can waits up to 60s to become leader
  #If cainjector is not fully initialized we can find the following error
  #  cert-manager-init/templates/issuer.yaml failed: Internal error occurred:
  #  failed calling webhook "webhook.cert-manager.io": failed to call webhook:
  #  Post "https://cert-manager-webhook.cert-manager.svc:443/mutate?timeout=10s": x509: certificate signed by unknown authority
  # In seconds
  # -- Time to wait CertManager to be ready to prevent issuer creation errors
  leaseWaitTimeonStartup: 80

  cert-manager:
    enabled: true
    installCRDs: true
    namespace: cert-manager

keycloak:
  enabled: true
  image:
    tag: 20.0.5-debian-11-r2
  auth:
    adminUser: "admin"
    adminPassword: "adpass"
  postgresql:
    enabled: true
    image:
      tag: 15.2.0-debian-11-r31
    auth:
      username: "keycloak"
      password: "keycloakdbuser"
      database: "keycloak"
  # -- Since keycloak 17+, default to / but the controllers work with older versions
  httpRelativePath: "/auth/"
  #proxy: edge
  #tls:
  #  enabled: true
  #  autoGenerated: true
  #extraEnvVars:
  #  - name: PROXY_ADDRESS_FORWARDING
  #    value: "true"
  ##
  # -- Keycloak LoadBalancer and Headless ClusterIp service port
  service:
    ports: &portKeycloak
      http: 8083
  # -- Keycloak HTTP container port
  containerPorts: *portKeycloak

  # -- Create a myrealm realm with a seccon user
  keycloakConfigCli:
    enabled: true
    image:
      tag: 5.5.0-debian-11-r35
    backoffLimit: 1
    command: [ "java", "-jar", "/opt/keycloak-config-cli.jar" ]
    configuration:
      myrealm.json: |
        {
          "enabled": true,
          "realm": "myrealm",
          "users": [
            {
            "username": "seccon",
            "email": "seccon@oda.io",
            "enabled": true,
            "firstName": "Security",
            "lastName": "User"
            }
           ]
        }

  ingress:
    enabled: false
    ingressClassName: "traefik"
    hosts:
      - name: keycloak.local
        path: /
        tls: false

component-operator:
  deployment:
    operatrorName: component-operator
    compopImage: tmforumodacanvas/component-operator
    compopVersion: 0.6.0
    compopPrereleaseSuffix:
    imagePullPolicy: IfNotPresent
    istioGateway: true
    secconImage: tmforumodacanvas/security-listener
    secconVersion: 0.7.1
    secconPrereleaseSuffix:
    monitoredNamespaces: 'components'           # comma separated list of namespaces
    keycloak: *portKeycloak
    hostName: "*"
    httpsRedirect: true
    credentialName: istio-ingress-cert    
  #We reuse the admin user created on keycloak installation
  credentials:
    user: admin
    pass: adpass
  configmap:
    kcrealm: myrealm
    # -- Log level [python] (https://docs.python.org/3/library/logging.html
    loglevel: '20'
    

api-operator-istio:
  deployment:
    operatrorName: api-operator-istio
    apiopImage: tmforumodacanvas/api-operator-istio
    apiopVersion: 0.1.0
    apiopPrereleaseSuffix:
    imagePullPolicy: IfNotPresent
    istioGateway: true
    monitoredNamespaces: 'components'           # comma separated list of namespaces
    ingressClass:
      enabled: false
      name: nginx
    dataDog:
      enabled: true
    hostName: "*"
    httpsRedirect: true
    credentialName: istio-ingress-cert    
  configmap:
    loglevel: '20'
    # publicHostname: 'components.example.com'
     
dependentapi-simple-operator:
  enabled: true
  image: tmforumodacanvas/dependentapi-simple-operator
  version: 0.2.4
  prereleaseSuffix: 
  imagePullPolicy: IfNotPresent
  loglevel: '20'
  serviceInventoryAPI:
    enabled: true
    image: tmforumodacanvas/tmf638-service-inventory-api
    version: 0.1.1
    prereleaseSuffix:
    imagePullPolicy: IfNotPresent
    serverUrl: http://info.canvas.svc.cluster.local
    mongodb:
      port: 27017
      database: svcinv

canvas-vault:
  enabled: true
  # changing the auth_path requires changing the encrypted token in secretsmanagement-operator
  auth_path: "jwt-k8s-sman"
  # if issuer is empty, it will be autodetected
  issuer:
  # if cacert is empty it will be autodetected
  cacert:
  vault:
    #fullnameOverride: "canvas-vault-hc"
    nameOverride: "vault-hc"
    global:
      # if the namespace is changed the internal service address configured  
      # in "secretsmanagement-operator.vault_addr" has to be set accordingly. 
      namespace: "canvas-vault"
      tlsDisable: false
    server:
      image:
        # last version with MPL license
        tag: "1.14.8"
          
      dev:
        enabled: false
        ## Set VAULT_DEV_ROOT_TOKEN_ID value
        #devRootToken: "egalegal"
      standalone:
        enabled: true
        config: |
          ui = true
          listener "tcp" {
            tls_disable = 0
            address = "[::]:8200"
            cluster_address = "[::]:8201"
            tls_cert_file = "/vault/userconfig/canvasvault-tls/tls.crt"
            tls_key_file  = "/vault/userconfig/canvasvault-tls/tls.key"
            tls_client_ca_file = "/vault/userconfig/canvasvault-tls/ca.crt"
          }
          storage "file" {
            path = "/vault/data"
          }
      
      statefulSet:
        securityContext:
          pod:
            fsGroup: 1000
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 100
            supplementalGroups:
            - 1000
          container: 
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
              - ALL
      # Enables debug logging.
      debug: true
      dataStorage:
        enabled: true
        size: 128M
        mountPath: "/vault/data"
        storageClass: null
        accessMode: ReadWriteOnce
        annotations: {}
      extraEnvironmentVars:
         VAULT_CACERT: /vault/userconfig/canvasvault-tls/ca.crt
         VAULT_TLSCERT: /vault/userconfig/canvasvault-tls/tls.crt
         VAULT_TLSKEY: /vault/userconfig/canvasvault-tls/tls.key
      volumes:
        - name: tmpvol
          emptyDir: {}
        - name: userconfig-canvasvault-tls
          secret:
           secretName: canvasvault-tls
           defaultMode: 420
      volumeMounts:
        - name: tmpvol
          mountPath: /tmp
        - name: userconfig-canvasvault-tls
          mountPath: /vault/userconfig/canvasvault-tls
          readOnly: true

    injector:
      # True if you want to enable vault agent injection.
      # @default: global.enabled
      enabled: false
      
      agentImage:
        # last version with MPL license
        tag: "1.14.8"

    csi:
      agent:
        image:
          # last version with MPL license
          tag: "1.14.8"

secretsmanagement-operator:
  image: tmforumodacanvas/secretsmanagement-operator
  version: 0.1.3
  prereleaseSuffix:
  imagePullPolicy: IfNotPresent
  
  sidecarImage: tmforumodacanvas/secretsmanagement-sidecar
  sidecarVersion: 0.1.0
  sidecarPrereleaseSuffix:
  sidecarImagePullPolicy: IfNotPresent
  
  # if the internal service address is used the vault_addr has to be in sync 
  # with the namespace configured in "canvas-vault.vault.global.namespace"
  vault_addr: "https://canvas-vault-hc.canvas-vault.svc.cluster.local:8200"
  # allow https communication with self signed certificate
  vault_skip_verify: "true"
  # the tempaltes can be used to generate cluster specific authenticator and key-value stores, here 'sman'.
  auth_path: "jwt-k8s-sman"
  secrets_mount_tpl: "kv-sman-{0}"
  policy_name_tpl: "sman-{0}-policy"
  login_role_tpl: "sman-{0}-role"
  secrets_base_path_tpl: "sidecar"

  # use autodetection to retreive the value for audience 
  autodetectAudience: true
  # as an alternative it can be retrieved manually and set directly: 
  #   kubectl get --raw /.well-known/openid-configuration | jq -r '.issuer'
  #audience: "https://kubernetes.default.svc.cluster.local"
  #audience: "https://container.googleapis.com/v1/projects/tmforum-oda-component-cluster/locations/europe-west3/clusters/ihc-dt"
  
  # INFO=20, DEBUG=10
  logLevel: 20

  ### only one of the following four methods must be used
  
  ## 1) plaintext token for HashiCorp Vault.
  # In the log files a warning will be shown with the encrypted value, which should be used instead of this 
  #hvacToken: egalegal
  
  ## 2) encrpyted token (can be found in logfile)
  #hvacTokenEnc: "03fb..."

  ## 3) secret key ref
  # In the log files a warning will be shown with the encrypted value, which should be used instead of this
  hvacTokenSecret:
    name: canvas-vault-hc-secrets
    key: rootToken

  ## 4) encrypted secret key ref
  #hvacTokenEncSecret:
  #  name: enc-secrets
  #  key: hvacTokenEnc


oda-webhook:
  image: tmforumodacanvas/compcrdwebhook
  version: 0.11.0
  prereleaseSuffix:  
  imagePullPolicy: IfNotPresent
 
