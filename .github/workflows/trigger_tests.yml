name: trigger_test

on:
  workflow_dispatch:
  pull_request:
    branches:
    - main

jobs:

  check_skip_tests_job:
    runs-on: ubuntu-latest
    if: "!contains(github.event.pull_request.title, '[skip tests]')"
    outputs:
      COMMITMSG_SKIPTESTS: ${{ steps.check_skiptests_msg.outputs.SKIPTESTS }}
      PRERELEASESUFFIX_SKIPTESTS: ${{ steps.check_prereleasesuffixremoval.outputs.SKIPTESTS }}
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.ref }}
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        fetch-depth: 2    # this is needed for getting the diff of the last commit
        
    - name: Check for [skip tests] in Message
      id: check_skiptests_msg
      run: |
        message=$(git log -1 --format=oneline --pretty=format:"%s")
        echo "GIT COMMIT MESSAGE: $message"
        if echo $message | grep "\[skip tests\]" >/dev/null
        then
          echo "SKIPPING TESTS"
          echo "SKIPTESTS=1" >> $GITHUB_OUTPUT
        else
          echo "'[skip tests]' magic words were not found in commit message, not skipping tests"
        fi

    - name: check last commit contains only prerelease suffix removals 
      id: check_prereleasesuffixremoval
      shell: bash
      run: |
        echo "---- CHANGED FILES ----"
        git diff --name-only HEAD~1
        echo "---- ------------- ----"
        export CHANGED_FILES=$(git diff --name-only HEAD~1)
        if [ "$CHANGED_FILES" == "charts/canvas-oda/values.yaml" ]
        then
          echo "only charts/canvas-oda/values.yaml was changed."
          echo "checking changes if only prerelease suffixes were removed."
          
          echo "---- DIFF FROM LAST COMMIT ----"
          git diff -w -U0 --color=always HEAD~1
          echo "---- --------------------- ----"
          
          git diff -w -U0 --color=never HEAD~1 > gitdiff.txt
          export OLD_LINES=$(cat gitdiff.txt | grep -i "^- " | wc -l)
          export NEW_LINES=$(cat gitdiff.txt | grep -i "^+ " | wc -l)
          export NEW_LINES_WITH_EMPTY_PRS=$(cat gitdiff.txt | grep -i "^+ .*prereleasesuffix:\s*$" | wc -l)

          echo "OLD LINES ($OLD_LINES)"
          cat gitdiff.txt | grep -i "^- " || true
          echo "---- -------------------- ----"
          echo "NEW LINES ($NEW_LINES)"
          cat gitdiff.txt | grep -i "^+ " || true
          echo "---- -------------------- ----"
          echo "NEW LINES WITH EMPTY PRERELEASESUFFIX ($NEW_LINES_WITH_EMPTY_PRS)"
          cat gitdiff.txt | grep -i "^+ .*prereleasesuffix:\s*$" || true
          echo "---- -------------------- ----"
          
          if [ "$OLD_LINES" != "$NEW_LINES" ]
          then
            echo "Number of old lines and new lines differs, not skipping tests"
          else
            if [ "$NEW_LINES" != "$NEW_LINES_WITH_EMPTY_PRS" ]
            then
              echo "not all new lines are empty prereleasesuffixes, not skipping tests"
            else
              echo "detected only prerelease suffix removals in changed files"
              echo "SKIPPING TESTS"
              echo "SKIPTESTS=1" >> $GITHUB_OUTPUT
            fi
          fi
        else
          echo "changes to other files than values.yaml detected, not skipping tests"
        fi 


  run_tests_job:
    runs-on: ubuntu-latest
    needs: check_skip_tests_job    
    if: "!needs.check_skip_tests_job.outputs.COMMITMSG_SKIPTESTS && !needs.check_skip_tests_job.outputs.PRERELEASESUFFIX_SKIPTESTS"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.ref }}
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        
    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        kubectl version --client
        uname -m

    - name: Install kind
      run: |
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind

    - name: Create kind cluster
      run: |
        kind create cluster
        kubectl get nodes --show-labels
        
    - name: Download Kind LB Cloud Provider
      run: |
       git clone https://github.com/kubernetes-sigs/cloud-provider-kind.git
       cd cloud-provider-kind && make
       bin/cloud-provider-kind &

    - name: Install Helm
      run: |
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh
        kubectl get ns

    - name: Install helm-git
      run: |
        helm plugin install https://github.com/aslafy-z/helm-git.git

    - name: Install istio Helm chart
      run: |
        helm repo add istio https://istio-release.storage.googleapis.com/charts
        kubectl create namespace istio-system
        helm install istio-base istio/base -n istio-system
        helm install istiod istio/istiod -n istio-system --wait
        kubectl create namespace istio-ingress
        kubectl label namespace istio-ingress istio-injection=enabled
        helm install istio-ingress istio/gateway -n istio-ingress --set labels.app=istio-ingress --set labels.istio=ingressgateway

    - name: Install Helm chart from Git repo
      run: |
        echo DEBUG: update ./charts/cert-manager-init
        helm dependency update ./charts/cert-manager-init
        helm dependency update ./charts/apisix-gateway
        helm dependency update ./charts/kong-gateway
        helm dependency update ./charts/canvas-vault
        echo DEBUG: update ./charts/canvas-oda
        helm dependency update ./charts/canvas-oda
        echo DEBUG: helm install canvas -n canvas
        helm install canvas -n canvas --create-namespace ./charts/canvas-oda
        echo DEBUG: finished Install Helm chart from Git repo

    - name: Port Forwarding Keycloak Service
      run: |
        sleep 30
        kubectl -n canvas port-forward svc/canvas-keycloak 8083:8083 &

    - name: Installing example component PC 
      run: |
        helm install ctk feature-definition-and-test-kit/testData/productcatalog-static-roles-v1/ -n components     
        sleep 30
        kubectl get all -n components
        kubectl logs -l app=component-operator -n canvas

    - name: Check status of deployments
      run: |
        sleep 90
        kubectl get all -n canvas
        kubectl get all -n components
        kubectl get all -n istio-ingress
        kubectl get all -n istio-system
        kubectl get exposedapis -n components
        kubectl get components -n components
  
    - name: Remove the example PC Component
      run: |
        helm uninstall ctk -n components
        
    - name: Install test Kit
      continue-on-error: true
      run: |
        cd feature-definition-and-test-kit/identity-manager-utils-keycloak
        npm install
        cd ../package-manager-utils-helm
        npm install
        cd ../resource-inventory-utils-kubernetes
        npm install
        cd ..
        npm install
        export KEYCLOAK_USER=admin 
        export KEYCLOAK_PASSWORD=adpass 
        export KEYCLOAK_BASE_URL="http://localhost:8083/auth/"
        export KEYCLOAK_REALM=odari
        #export CUCUMBER_PUBLISH_TOKEN=9afda79b-9ea0-44ff-8359-7f381ade4bb6
        npm start 2>&1 | tee /tmp/test_results.log
        kubectl get exposedapis -n components
        kubectl -n canvas logs deployment/component-operator | tee /tmp/component-operator.log
        kubectl -n canvas logs deployment/api-operator-istio | tee /tmp/api-operator-istio.log
              
    - name: Upload Test Report
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: |
         /tmp/component-operator.log
         /tmp/api-operator-istio.log
         /tmp/test_results.log
  
    - name: Delete kind cluster
      if: always()
      run: |
        kubectl get pods -n canvas-vault || true
        kubectl logs -n canvas-vault job/canvas-vault-hc-post-install-hook || true
        kind delete cluster
        
    - name: check test success
      run: |
        tail -10 /tmp/test_results.log
        tail -10 /tmp/test_results.log | grep --color=always failed || true
        if tail -10 /tmp/test_results.log | grep failed >/dev/null
        then 
          echo There are failed tests!
          exit 1
        else
          echo OK, no test failures.
        fi
