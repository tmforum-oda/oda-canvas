@startuml

actor CanvasOps as "Canvas Operator"
entity Component
participant "Component Operator" as ComponentOperator
entity "Secrets Management" as SecretsManagement
participant "Secrets Management Operator" as SecretsManagementOperator
participant "Kubernetes API" as KubernetesAPI
participant ComponentImplementation [
	=Component POD
	----
	Component-Implementation
]
participant SecretsManagementSideCar [
	=Component POD
	----
	Secrets-Management-SideCar
]
participant CanvasVault as "Canvas Vault"


group Canvas Vault Setup 
    ...
	CanvasOps -> CanvasVault : setup jwt endpoint for oidc_discovery with secrets/kubernetes.io/serviceaccount/ca.crt
	...
end group

== COMPONENT DEPLOYMENT ==	

group Bootstrap - component deployment
	Component -> ComponentOperator : on.create
	create SecretsManagement
	ComponentOperator -> SecretsManagement  : extract config from Component
	SecretsManagement -> SecretsManagementOperator : on.create
	SecretsManagementOperator -> SecretsManagementOperator : create unique Component-Instance-ID <CIID>
	SecretsManagementOperator -> KubernetesAPI : [otional] create ServiceAccount "sa-<CIID>"
	SecretsManagementOperator -> CanvasVault : create Key-Value store "kv-sman-<CIID>"
	SecretsManagementOperator -> CanvasVault : create Policy "sman-<CIID>-policy" with access to kv-sman-<CIID>
	SecretsManagementOperator -> CanvasVault : create login Role "sman-<CIID>-role" for authenticating with JWT based on configured POD-Selector having "sman-<CIID>-policy" permissions
end group
	
== POD DEPLOYMENT ==	
	
group Mutate PODs which request Secrets-Management-Access
	KubernetesAPI -> SecretsManagementOperator : POD.onCreate()
	SecretsManagementOperator -> SecretsManagementSideCar : create & inject SideCar container with JWT mount, Canvas-Vault-URL, role-name and KV-Store name<CIID>
	ComponentImplementation <-[#ff0000]-> SecretsManagementSideCar
	activate ComponentImplementation 
	activate SecretsManagementSideCar 
    note right of ComponentImplementation
    started together in one POD
    end note	
	SecretsManagementSideCar -> CanvasVault : login to "secretsmanagement-<CIID>" using JWT of "sa-<CIID>"
end group

== RUNTIME ==	

group Initialization - one-time negotiation about a token securing the localhost communication 
	ComponentImplementation -> SecretsManagementSideCar : init(seed)
	skinparam responseMessageBelowArrow true
	ComponentImplementation <-- SecretsManagementSideCar : localhost-token
end group

note over ComponentImplementation : some time later

group Runtime - component running
	ComponentImplementation -> SecretsManagementSideCar : create secret(key, value)
	SecretsManagementSideCar -> CanvasVault : create secret("secretsmanagement-<CIID>", key, value)
	ComponentImplementation -> SecretsManagementSideCar : read secret(key)
	SecretsManagementSideCar -> CanvasVault : read secret("secretsmanagement-<CID>", key)
	SecretsManagementSideCar  <-- CanvasVault : return secret-value
	ComponentImplementation <-- SecretsManagementSideCar : return secret-value 
end group

@enduml
