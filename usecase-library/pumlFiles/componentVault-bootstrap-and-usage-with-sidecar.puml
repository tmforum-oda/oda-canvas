@startuml

participant Canvas as "Canvas"
entity Component
participant "Component Operator" as ComponentOperator
participant "Kubernetes API" as KubernetesAPI
participant ComponentImplementation [
	=Component POD
	----
	Component Implementation
]
participant ComponentVaultSideCar [
	=Component POD
	----
	Component Vault SideCar
]
participant CanvasVault as "Canvas Vault"


group Canvas Vault Setup 
    ...
	Canvas -> CanvasVault : setup jwt endpoint for oidc_discovery with secrets/kubernetes.io/serviceaccount/ca.crt
	...
end group

group Bootstrap - component deployment
	Component -> ComponentOperator : on.create
	ComponentOperator -> ComponentOperator : create unique Component-ID <CID>
	ComponentOperator -> KubernetesAPI : create ServiceAccount <SA-CID> for Component
	ComponentOperator -> CanvasVault : create Key-Value store /kv-<CID>
	ComponentOperator -> CanvasVault : Setup JWT role for <SA-CID> with full access to path /kv-<CID>
	ComponentOperator -> ComponentImplementation ** : inject SideCar container with ServiceAccountToken & <CID>
	ComponentImplementation <-[#ff0000]-> ComponentVaultSideCar ** : started together
	ComponentVaultSideCar -> CanvasVault : login using JWT of <SA-CID>
	...
end group

...
note over ComponentImplementation : some time later
...

group Runtime - component running
	...
	...
	ComponentImplementation -> ComponentVaultSideCar : create secret(key, value)
	ComponentVaultSideCar -> CanvasVault : create secret(key, value) in /kv-<CID>
	...
	ComponentImplementation -> ComponentVaultSideCar : read secret(key)
	ComponentVaultSideCar -> CanvasVault : read secret(key) in /kv-<CID>
	ComponentVaultSideCar  <-- CanvasVault : return secret-value
	ComponentImplementation <-- ComponentVaultSideCar : return secret-value 
end group

@enduml
