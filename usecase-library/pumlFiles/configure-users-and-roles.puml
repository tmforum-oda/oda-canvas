@startuml

actor BusinessAdmin
participant "Component\nManagement\nOperator" as ComponentOperator
entity "Identity\nResource" as IdentityResource
participant "Component Implementation" as ComponentImplementation
participant "Identity Operator" as identityOperator
participant "Secret store" as SecretStore
participant "Identity Management System" as IDM

group Bootstrap
IdentityResource <- ComponentOperator : create

IdentityResource -> identityOperator: on.create 
identityOperator -> IDM: Create client for component
note right
    Clients are entities that can request authentication of a user.
    All the roles and permissions are associated with a client.
end note

identityOperator -> IdentityResource : Query bootstrap Admin role defined\nin component SecurityFunction segment
identityOperator -> IDM: Assign Canvas **seccon** user to Admin role
note right
    The Admin role is used by the Canvas to call APIs on the ODA Component.
end note

identityOperator -> IDM: Create system user for component
note right
    This is a system-generated user (uuid) that is used when
    the component makes API calls (to another component or
    canvas service).
end note
identityOperator <- IDM: Return clientId and secret
identityOperator -> SecretStore: Update with clientId and secret

group Dynamic role management - optional
    identityOperator -> ComponentImplementation: Register identityOperator to listen to the\nAPI provided by the component
    note right
        The component implementation provides an API that the identityOperator can call to manage roles.
        The identityOperator listens to the API and manages roles based on the events. The component needs
        to implement the **TMF672 User Roles and Permissions API** and the operator listens for **permissionSpecificationSet** events.
    end note
    identityOperator -> ComponentImplementation: Query dynamically defined roles in\nAPI provided by the component
    identityOperator -> IDM: create role(s)
end 
group Static role management - optional
    identityOperator -> IdentityResource: Query statically defined roles in\ncomponent SecurityFunction segment
    identityOperator -> IDM: create role(s)
end 

end 
group Normal business operations - for dynamic role management
    BusinessAdmin -> ComponentImplementation: Create Role
    ComponentImplementation-> identityOperator: create notification event
    identityOperator -> IDM: create role
    BusinessAdmin -> ComponentImplementation: Update Role
    ComponentImplementation-> identityOperator: update notification event
    identityOperator -> IDM: Update role
    BusinessAdmin -> ComponentImplementation: Delete Role
    ComponentImplementation-> identityOperator: delete notification event
    identityOperator -> IDM: Delete role
end

group Uninstall
    ComponentOperator -> IdentityResource  : delete
    IdentityResource -> identityOperator: on.delete 
    identityOperator -> IDM: Delete client, system user and all associated roles  
end

@enduml
