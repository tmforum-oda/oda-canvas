@startuml

actor Operations
entity "Component\nResource" as Component
participant "Component\nLifecycle\nManagement\nOperator" as ComponentOperator
entity "Exposed\nAPI\nResource" as ExposedAPI
participant "API\nManagement\nOperator" as APIExposureOperator
entity "Published\nNotification\nResource" as PublishedNotification
participant "Event\nManagement\nOperator" as EventOperator
entity "Identity\nResource" as Identity
participant "Identity\nConfig\nOperator" as IdentityOperator
entity "Observability\nResource" as Observability
participant "Observability\nConfig\nOperator" as ObservabilityOperator
entity "Secrets\nResource" as Secrets
participant "Secrets\nManagement\nOperator" as SecretsOperator
entity "DependentAPI\nResource" as DependentAPI
participant "Dependency\nManagement\nOperator" as DependencyOperator


Component <- Operations : Install
Component -> ComponentOperator: on.create 
Component <- ComponentOperator: set status to **In-Progress** 
ComponentOperator -> ExposedAPI: create
note right
    A separate ExposedAPI resource is created
    for each exposed API in the core function,
    security and management sections
end note
group For each exposed API
    ExposedAPI -> APIExposureOperator: on.create 
    APIExposureOperator -> APIExposureOperator: Process API
end


ComponentOperator -> PublishedNotification: create
note right
    A separate PublishedNotification resource is created
    for each Published Notification in the core function,
    security and management sections
end note
group For each Published Notification
    PublishedNotification -> EventOperator: on.create 
    EventOperator -> EventOperator: Process Notification
end

ComponentOperator -> Identity: create
Identity -> IdentityOperator: on.create
IdentityOperator -> IdentityOperator: Manage roles and users

ComponentOperator -> Observability: create
Observability -> ObservabilityOperator: on.create
ObservabilityOperator -> ObservabilityOperator: Configure Observability

ComponentOperator -> Secrets: create
Secrets -> SecretsOperator: on.create
SecretsOperator -> SecretsOperator: Configure secrets vault

ComponentOperator -> DependentAPI: create
note right
    A separate DependentAPI resource is created
    for each dependent API in the core function,
    security and management sections
end note
group For each dependent API
    DependentAPI -> DependencyOperator: on.create
    DependencyOperator -> DependencyOperator: Configure dependencies
end



group Updates - can arrive in any order
    group For each exposed API
        ExposedAPI <- APIExposureOperator: update
        ComponentOperator <- ExposedAPI: on.update
        Component <- ComponentOperator: update 
        Component <- ComponentOperator: If all updates complete set status to **Complete** 
    end

    group For each Published Notification
        PublishedNotification <- EventOperator: update
        ComponentOperator <- PublishedNotification: on.update
        Component <- ComponentOperator: update 
        Component <- ComponentOperator: If all updates complete set status to **Complete** 
    end

    Identity <- IdentityOperator: update
    ComponentOperator <- Identity: on.update
    Component <- ComponentOperator: update
    Component <- ComponentOperator: If all updates complete set status to **Complete** 

    Observability <- ObservabilityOperator: update
    ComponentOperator <- Observability: on.update
    Component <- ComponentOperator: update 
    Component <- ComponentOperator: If all updates complete set status to **Complete** 

    Secrets <- SecretsOperator: update
    ComponentOperator <- Secrets: on.update
    Component <- ComponentOperator: update 
    Component <- ComponentOperator: If all updates complete set status to **Complete** 

    group For each dependent API
        DependentAPI <- DependencyOperator: update
        ComponentOperator <- DependentAPI: on.update
        Component <- ComponentOperator: update 
        Component <- ComponentOperator: If all updates complete set status to **Complete** 
    end
    
End group
@enduml